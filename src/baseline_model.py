# -*- coding: utf-8 -*-
"""baseline_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YRRVl4hYCwSraR0UvSl9hOTU1puJj-qm
"""

# install dependencies (quietly)
!pip install scikit-learn pandas --quiet

# 1. Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
import joblib

# 2. Load dataset
df = pd.read_csv('/content/telecom_comments_sentiment.csv')

# ðŸ”¹ Handle missing text values (important to avoid ValueError)
df['clean_text'] = df['clean_text'].fillna('')   # replace NaN with empty string

# 3. Separate features and labels
X = df['clean_text']                # text column
y = df['sentiment']                 # positive / neutral / negative

# 4. Split into train/test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 5. Vectorize text using TF-IDF
vectorizer = TfidfVectorizer(max_features=5000, ngram_range=(1, 2))
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# 6. Train logistic regression classifier
clf = LogisticRegression(max_iter=1000)
clf.fit(X_train_vec, y_train)

# 7. Evaluate on test set
y_pred = clf.predict(X_test_vec)
print("\nClassification Report:\n")
print(classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n")
print(confusion_matrix(y_test, y_pred))

# 8. Save model and vectorizer (optional)
joblib.dump(clf, '/content/baseline_model.pkl')
joblib.dump(vectorizer, '/content/tfidf_vectorizer.pkl')
print("\nModel and vectorizer saved.")